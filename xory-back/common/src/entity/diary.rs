//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use super::sea_orm_active_enums::Weather;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "diary")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub date: DateTime,
    pub title: String,
    pub content: Option<String>,
    pub temperature: Option<i8>,
    pub weather: Option<Weather>,
    pub category: u32,
    pub date_create: DateTime,
    pub date_modify: DateTime,
    pub uid: u32,
    #[sea_orm(column_type = "Float", nullable)]
    pub longitude: Option<f32>,
    #[sea_orm(column_type = "Float", nullable)]
    pub latitude: Option<f32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::diary_category::Entity",
        from = "Column::Category",
        to = "super::diary_category::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    DiaryCategory,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Uid",
        to = "super::user::Column::Uid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::diary_category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiaryCategory.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
