//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "diary_to_diary_tag")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub did: u64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub tid: u32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::diary::Entity",
        from = "Column::Did",
        to = "super::diary::Column::Did",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Diary,
    #[sea_orm(
        belongs_to = "super::diary_tag::Entity",
        from = "Column::Tid",
        to = "super::diary_tag::Column::Tid",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    DiaryTag,
}

impl Related<super::diary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Diary.def()
    }
}

impl Related<super::diary_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiaryTag.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
