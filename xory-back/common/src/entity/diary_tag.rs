//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "diary_tag")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub tid: u32,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::diary_to_diary_tag::Entity")]
    DiaryToDiaryTag,
    #[sea_orm(has_many = "super::user_to_diary_tag::Entity")]
    UserToDiaryTag,
}

impl Related<super::diary_to_diary_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DiaryToDiaryTag.def()
    }
}

impl Related<super::user_to_diary_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserToDiaryTag.def()
    }
}

impl Related<super::diary::Entity> for Entity {
    fn to() -> RelationDef {
        super::diary_to_diary_tag::Relation::Diary.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::diary_to_diary_tag::Relation::DiaryTag.def().rev())
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_to_diary_tag::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_to_diary_tag::Relation::DiaryTag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
