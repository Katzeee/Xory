//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub uid: i32,
    pub email: String,
    pub username: String,
    pub password: String,
    pub register_time: DateTimeUtc,
    pub last_visit_time: DateTimeUtc,
    pub comment: Option<String>,
    pub wechat: Option<String>,
    pub phone_number: Option<String>,
    pub group_id: i32,
    pub diary_count: i32,
    pub avatar: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::diary::Entity")]
    Diary,
    #[sea_orm(
        belongs_to = "super::user_group::Entity",
        from = "Column::GroupId",
        to = "super::user_group::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    UserGroup,
}

impl Related<super::diary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Diary.def()
    }
}

impl Related<super::user_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroup.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
